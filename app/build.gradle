buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        // The dynamic version here is explicitly recommended by the Crashlytics docs:
        // https://docs.fabric.io/android/fabric/integration.html#modify-build-gradle
        //noinspection GradleDynamicVersion
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    mavenCentral()
    maven {
        url 'https://maven.fabric.io/public'
    }
}

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'sh', '-c',
                    'git describe --tags --dirty --first-parent'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null;
    }
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "com.gmail.walles.johan.headsetharry"

        // The TTS API in SDK 21 is broken, stay at 20 or lower:
        // https://code.google.com/p/android/issues/detail?id=80696
        minSdkVersion 20

        targetSdkVersion 23
        versionCode 1
        versionName getVersionName()
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        // This test can be fine one day and not fine the next without us changing anything. Not
        // reliable enough, disable.
        //
        // Docs at http://tools.android.com/tips/lint-checks
        disable("GradleDependency")

        // Johan doesn't want to generate multiple icon sizes; most phones can resize an icon just
        // fine by itself.
        disable("IconMissingDensityFolder")

        // The problematic language-detector code seems not to be called by us, never mind. Could
        // probably easily be fixed upstream.
        //
        // Somewhat touched upon here: https://github.com/optimaize/language-detector/issues/13
        //
        //noinspection InvalidPackage
        disable("InvalidPackage")

        abortOnError true
        warningsAsErrors true

        textOutput "stdout"
        textReport true

        htmlReport true
        htmlOutput file("$project.buildDir/reports/lint.html")
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.3.0'
    compile 'com.android.support:support-v4:23.3.0'
    compile 'com.jakewharton.timber:timber:4.1.2'
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }
    compile('com.optimaize.languagedetector:language-detector:0.5')
}
