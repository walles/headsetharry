/*
 * Copyright 2016 Johan Walles <johan.walles@gmail.com>
 *
 * This file is part of Headset Harry.
 *
 * Headset Harry is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Headset Harry is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
 */

buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        // The dynamic version here is explicitly recommended by the Crashlytics docs:
        // https://docs.fabric.io/android/fabric/integration.html#modify-build-gradle
        //noinspection GradleDynamicVersion
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

plugins {
    // Add jacocoTestReportDebug task to generate unit test coverage data
    id "com.vanniktech.android.junit.jacoco" version "0.4.0"

    // Add coveralls task to uploads unit test coverage data to coveralls.io
    id "com.github.kt3k.coveralls" version "2.6.3"
}
coveralls.jacocoReportPath = 'app/build/reports/jacoco/debug/jacoco.xml'

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'findbugs'
apply plugin: 'pmd'

repositories {
    mavenCentral()
    maven {
        url 'https://maven.fabric.io/public'
    }
}

// From: http://stackoverflow.com/questions/17097263/automatically-versioning-android-project-from-git-describe-with-android-studio-g
def getVersionCode = { ->
    try {
        def code = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'tag', '--list', 'version-*'
            standardOutput = code
        }
        return code.toString().split("\n").size()
    }
    catch (ignored) {
        return -1;
    }
}

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'sh', '-c',
                    'git describe --dirty --first-parent --match="version-*"|sed \'s/^version-//\''
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null;
    }
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "com.gmail.walles.johan.headsetharry"

        // The TTS API in SDK 21 is broken, stay at 20 or lower:
        // https://code.google.com/p/android/issues/detail?id=80696
        minSdkVersion 20

        targetSdkVersion 23
        versionCode getVersionCode()
        versionName getVersionName()
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        // This test can be fine one day and not fine the next without us changing anything. Not
        // reliable enough, disable.
        //
        // Docs at http://tools.android.com/tips/lint-checks
        disable("GradleDependency")

        // Johan doesn't want to generate multiple icon sizes; most phones can resize an icon just
        // fine by itself.
        disable("IconMissingDensityFolder")

        // The problematic language-detector code seems not to be called by us, never mind. Could
        // probably easily be fixed upstream.
        //
        // Somewhat touched upon here: https://github.com/optimaize/language-detector/issues/13
        //
        //noinspection InvalidPackage
        disable("InvalidPackage")

        abortOnError true
        warningsAsErrors true

        textOutput "stdout"
        textReport true

        htmlReport true
        htmlOutput file("$project.buildDir/reports/lint.html")
    }

    signingConfigs {
        release {
            if (System.console() && System.getenv('CI') != "true") {
                storeFile file(System.console().readLine("\n\$ Enter keystore path: "))
                storePassword System.console().readLine("\n\$ Enter keystore password: ")
                keyAlias System.console().readLine("\n\$ Enter key alias: ")
                keyPassword System.console().readLine("\n\$ Enter key password: ")
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
}

task pmd (type: Pmd, dependsOn: assembleDebug) {
    ruleSetFiles = files("${project.rootDir}/config/pmd-ruleset.xml")
    ignoreFailures = false
    consoleOutput = true
    ruleSets = []

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
}

// Getting text output from Findbugs is broken in the Gradle plugin
// (https://issues.gradle.org/browse/GRADLE-2994), so if people want to diagnose a FindBugs
// problem they'll just have to run "gradle check" locally.
//
// When that problem is fixed we should update this code to print a text report on stdout.
task findbugs(type: FindBugs) {
    reports {
        // What we really want here is text on stdout but that doesn't work:
        // https://issues.gradle.org/browse/GRADLE-2994
        xml.enabled = false
        html.enabled = true
    }

    ignoreFailures = false
    effort = "max"
    reportLevel = "low"
    excludeFilter = new File("${project.rootDir}/config/findbugs-filter.xml")
    classes = files("${project.rootDir}/app/build/intermediates/classes")

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    classpath = files()
}

check.doLast {
    project.tasks.getByName("findbugs").execute()
    project.tasks.getByName("pmd").execute()
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.3.0'
    compile 'com.android.support:support-v4:23.3.0'
    compile 'com.jakewharton.timber:timber:4.1.2'
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }
    compile('com.optimaize.languagedetector:language-detector:0.5')
}
